--------------------------------------------------------------------------------------------------
                              IMAGE SAVER
--------------------------------------------------------------------------------------------------


/**
 * Write a description of ImageSaver here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

public class ImageSaver {
    public void SaveImage() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            ImageResource image = new ImageResource(f);
            String ImgName = image.getFileName();
            String NewName = "Copy-" + ImgName;
            image.setFileName(NewName);
            image.save();
            image.draw();
            
        }
    }
}


*************************END**********************************************************************

--------------------------------------------------------------------------------------------------
                            IMAGE CONVERSION TO GREY
--------------------------------------------------------------------------------------------------


/**
 * Write a description of ImageToGrey here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

public class ImageToGrey {
    public ImageResource getGreyImage(ImageResource inImage) {
        ImageResource outImage = new ImageResource(inImage.getWidth(), inImage.getHeight());
        for (Pixel pixel : outImage.pixels()) {
            Pixel inImagePixel = inImage.getPixel(pixel.getX(), pixel.getY());
            int avgpxl = (inImagePixel.getRed() + inImagePixel.getGreen() + inImagePixel.getBlue())/3;
            pixel.setRed(avgpxl);
            pixel.setGreen(avgpxl);
            pixel.setBlue(avgpxl);
        }
        return outImage;
    }
    
    
    public void testGreyImage() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            ImageResource image = new ImageResource(f);
            ImageResource result = getGreyImage(image);
            result.draw();
            String imgFileName = image.getFileName();
            String newGreyFileName = "GreyOf-" + imgFileName;
            result.setFileName(newGreyFileName);
            result.save();
            
        }
    }

}

*************************END**********************************************************************

--------------------------------------------------------------------------------------------------
                           IMAGE INVERSION (NEGATIVE FORM)
--------------------------------------------------------------------------------------------------


/**
 * Write a description of ImageToInvertedImg here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

public class ImageToInvertedImg {
    public ImageResource getInvtImage(ImageResource inImage) {
        ImageResource outImage = new ImageResource(inImage.getWidth(), inImage.getHeight());
        for (Pixel pixel : outImage.pixels()) {
            Pixel inImagePixel = inImage.getPixel(pixel.getX(), pixel.getY());
            int Redpxl = inImagePixel.getRed();
            int Grnpxl = inImagePixel.getGreen();
            int Blpxl = inImagePixel.getBlue();
            pixel.setRed(255-Redpxl);
            pixel.setGreen(255-Grnpxl);
            pixel.setBlue(255-Blpxl);
        }
        return outImage;
    }
    
    
    public void testInvtImage() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            ImageResource image = new ImageResource(f);
            ImageResource result = getInvtImage(image);
            result.draw();
            String imgFileName = image.getFileName();
            String newInvtFileName = "InvertedOf-" + imgFileName;
            result.setFileName(newInvtFileName);
            result.save();
            
        }
    }

}


*************************END**********************************************************************

--------------------------------------------------------------------------------------------------
                           GET THE RANK OF THE NAMES
--------------------------------------------------------------------------------------------------


/**
 * Write a description of GetRank here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

public class GetRank {

    public int getRankName (FileResource fr) {
        int count = 0;
        int value = 0;
        int rankG = 0;
        CSVParser parser =fr.getCSVParser(false);
        for (CSVRecord rec : parser) {
            if (rec.get(1).equals("M")){
                value+=1;
                System.out.println("Name of the Boy is  " + rec.get(0) + "  & his rank is  " + value);
            }
            else {
                rankG+=1;
                System.out.println("Name of the Girl is  " + rec.get(0) + "  & her rank is  " + rankG);
            }
            count+=1;
        }
        return count;
    }

    
    public void TestRank() {
       int totalNames;
       DirectoryResource dr = new DirectoryResource();
       for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource (f);
            totalNames = getRankName(fr);
            System.out.println("There are total  " + totalNames + "  Names in the file  " + f.getName()  );
       }
    }
}

*************************END**********************************************************************

--------------------------------------------------------------------------------------------------
                           
--------------------------------------------------------------------------------------------------
